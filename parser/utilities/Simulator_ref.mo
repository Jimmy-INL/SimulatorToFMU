model Simulator
  "Block that exchanges a vector of real values with Simulator"
  extends Modelica.Blocks.Interfaces.BlockIcon;

protected  
  function replaceCharacters
    "Replace backward slash with forward slash" 
    input String insStr "Input string";
    output String outStr "Output string";
  external"C" outStr = str_replace(
        insStr,
        "\\",
        "/") annotation (IncludeDirectory="modelica://SimulatorToFMU.Resources/C-Sources",
        Include="#include \"replaceCharacters.c\"");
  end replaceCharacters;

  function detectingOperatingSystem
    "Detect the operating system and return 0 for Windows 64, 
    1 for Windows 32, 2 for Linux 64, and 3 for Linux32"
    output Integer osFla "Return value";
  external"C" osFla = detectOperatingSystem() 
    annotation (IncludeDirectory="modelica://SimulatorToFMU.Resources/C-Sources",
    Include="#include \"detectingOperatingSystem.c\"");
  end detectingOperatingSystem;
 
  Boolean havePytPat "true if PYTHONPATH is already set by the user";
  String pytPatSimulatorToFMU "Path to the Python Simulator driver";
  String pytPat "Value of PYTHONPATH environment variable";
  String cleanPathScript "Path to script with backward slash replaced with forward slash";
  Integer osFla=detectingOperatingSystem() "Flag for detecting operating system";

public    
///////////// THE CODE BELOW HAS BEEN AUTOGENERATED //////////////
  Modelica.Blocks.Interfaces.RealInput v(start=0.0, unit="V")
    "Voltage" annotation(Placement(transformation(extent={{-122,68},{-100,90}})));
  Modelica.Blocks.Interfaces.RealOutput i (unit="A")
    "Current" annotation(Placement(transformation(extent={{100,70},{120,90}})));
  // Configuration specific parameters coming from 
  // the inputs of the Python export tool (SimulatorToFMU.py) 
  // used to generate the FMU
  parameter String _configurationFileName = Modelica.Utilities.Files.loadResource("con_path")
    "Path to the configuration or input file";
  parameter Real _saveToFile = 0 "Flag for writing results"; 
  
protected   
  parameter String _pathToPythonMain=pyResFil[1]
    "Path to the main Python script of the simulator";
  parameter Integer nPyScr=78 
    "Number of Python scripts to be added to Pythonpath";
  parameter Integer nDblPar=0 
    "Number of double parameter values to sent to Simulator";
  parameter Integer nDblInp(min=1)=1 
    "Number of double input values to sent to Simulator";
  parameter Integer nDblOut(min=1)=1  
    "Number of double output values to receive from Simulator";
  Real resWri[1]= {_saveToFile} "Flag for writing results";
  Real dblInpVal[nDblInp] "Value to be sent to Simulator";
  
  parameter String pyResFil[nPyScr]={
    Modelica.Utilities.Files.loadResource("Z"),
    Modelica.Utilities.Files.loadResource(":"),
    Modelica.Utilities.Files.loadResource("\"),
    Modelica.Utilities.Files.loadResource("t"),
    Modelica.Utilities.Files.loadResource("h"),
    Modelica.Utilities.Files.loadResource("i"),
    Modelica.Utilities.Files.loadResource("e"),
    Modelica.Utilities.Files.loadResource("r"),
    Modelica.Utilities.Files.loadResource("r"),
    Modelica.Utilities.Files.loadResource("y"),
    Modelica.Utilities.Files.loadResource("\"),
    Modelica.Utilities.Files.loadResource("p"),
    Modelica.Utilities.Files.loadResource("r"),
    Modelica.Utilities.Files.loadResource("o"),
    Modelica.Utilities.Files.loadResource("j"),
    Modelica.Utilities.Files.loadResource("\"),
    Modelica.Utilities.Files.loadResource("c"),
    Modelica.Utilities.Files.loadResource("y"),
    Modelica.Utilities.Files.loadResource("d"),
    Modelica.Utilities.Files.loadResource("e"),
    Modelica.Utilities.Files.loadResource("r"),
    Modelica.Utilities.Files.loadResource("_"),
    Modelica.Utilities.Files.loadResource("r"),
    Modelica.Utilities.Files.loadResource("e"),
    Modelica.Utilities.Files.loadResource("p"),
    Modelica.Utilities.Files.loadResource("o"),
    Modelica.Utilities.Files.loadResource("\"),
    Modelica.Utilities.Files.loadResource("S"),
    Modelica.Utilities.Files.loadResource("i"),
    Modelica.Utilities.Files.loadResource("m"),
    Modelica.Utilities.Files.loadResource("u"),
    Modelica.Utilities.Files.loadResource("l"),
    Modelica.Utilities.Files.loadResource("a"),
    Modelica.Utilities.Files.loadResource("t"),
    Modelica.Utilities.Files.loadResource("o"),
    Modelica.Utilities.Files.loadResource("r"),
    Modelica.Utilities.Files.loadResource("T"),
    Modelica.Utilities.Files.loadResource("o"),
    Modelica.Utilities.Files.loadResource("F"),
    Modelica.Utilities.Files.loadResource("M"),
    Modelica.Utilities.Files.loadResource("U"),
    Modelica.Utilities.Files.loadResource("\"),
    Modelica.Utilities.Files.loadResource("b"),
    Modelica.Utilities.Files.loadResource("i"),
    Modelica.Utilities.Files.loadResource("n"),
    Modelica.Utilities.Files.loadResource("\"),
    Modelica.Utilities.Files.loadResource("."),
    Modelica.Utilities.Files.loadResource("."),
    Modelica.Utilities.Files.loadResource("\"),
    Modelica.Utilities.Files.loadResource("p"),
    Modelica.Utilities.Files.loadResource("a"),
    Modelica.Utilities.Files.loadResource("r"),
    Modelica.Utilities.Files.loadResource("s"),
    Modelica.Utilities.Files.loadResource("e"),
    Modelica.Utilities.Files.loadResource("r"),
    Modelica.Utilities.Files.loadResource("\"),
    Modelica.Utilities.Files.loadResource("u"),
    Modelica.Utilities.Files.loadResource("t"),
    Modelica.Utilities.Files.loadResource("i"),
    Modelica.Utilities.Files.loadResource("l"),
    Modelica.Utilities.Files.loadResource("i"),
    Modelica.Utilities.Files.loadResource("t"),
    Modelica.Utilities.Files.loadResource("i"),
    Modelica.Utilities.Files.loadResource("e"),
    Modelica.Utilities.Files.loadResource("s"),
    Modelica.Utilities.Files.loadResource("\"),
    Modelica.Utilities.Files.loadResource("S"),
    Modelica.Utilities.Files.loadResource("i"),
    Modelica.Utilities.Files.loadResource("m"),
    Modelica.Utilities.Files.loadResource("u"),
    Modelica.Utilities.Files.loadResource("l"),
    Modelica.Utilities.Files.loadResource("a"),
    Modelica.Utilities.Files.loadResource("t"),
    Modelica.Utilities.Files.loadResource("o"),
    Modelica.Utilities.Files.loadResource("r"),
    Modelica.Utilities.Files.loadResource("."),
    Modelica.Utilities.Files.loadResource("p"),
    Modelica.Utilities.Files.loadResource("y") 
  }"Python scripts for interfacing simulator";  
  
  Real uR[nDblInp]={
  v 
  }"Variables used to collect values to be sent to Simulator";
   
  Real yR[nDblOut]={
  i 
  }"Variables used to collect values received from Simulator";
  
  parameter String dblInpNam[nDblInp]={
  "v" 
  }"Input variables names to be sent to Simulator";
  
  parameter String dblOutNam[nDblOut]={
  "i" 
  }"Output variables names to be received from Simulator";
  parameter String dblParNam[nDblPar](each start="") 
    "Parameter variables names to be sent to Simulator";
  parameter Real dblParVal[nDblPar]=zeros(nDblPar)
    "Parameter variables values to be sent to Simulator";
  
///////////// THE CODE ABOVE HAS BEEN AUTOGENERATED //////////////  
  
  parameter String moduleName="Simulator"
    "Name of the Python module that contains the function";
  parameter String functionName="exchange" 
    "Name of the Python function";
  
initial algorithm 
  assert(_configurationFileName <> "",
    "Parameter _configurationFileName: " +
     _configurationFileName + " must be set to " +
     "the path to the Simulator input file. " +
     "This must be done prior to entering the " +
     "initialization mode of the FMU.");
algorithm 
  // Check the Operating system and change slash characters
  if (osFla < 2) then
    cleanPathScript := replaceCharacters(_pathToPythonMain);
  else
    cleanPathScript := _pathToPythonMain;
  end if;
  (pytPatSimulatorToFMU,,):= Modelica.Utilities.Files.splitPathName(
    cleanPathScript);
  (pytPat,havePytPat):= Modelica.Utilities.System.getEnvironmentVariable("PYTHONPATH");
  if havePytPat then
    if (osFla < 2) then
      Modelica.Utilities.System.setEnvironmentVariable(name="PYTHONPATH",
        content=pytPatSimulatorToFMU + ";" + pytPat);
    else
      Modelica.Utilities.System.setEnvironmentVariable(name="PYTHONPATH",
        content=pytPatSimulatorToFMU + ":" + pytPat);
    end if;
  else
    Modelica.Utilities.System.setEnvironmentVariable(name="PYTHONPATH", content=
      pytPatSimulatorToFMU);
  end if;

  // Compute values that will be sent to Simulator
  for _cnt in 1:nDblInp loop
	dblInpVal[_cnt] := uR[_cnt];
  end for;
  
  // Exchange data
  yR := SimulatorToFMU.Python3.5.Functions.simulator(
	  moduleName=moduleName,
	  functionName=functionName,
	  conFilNam=_configurationFileName,
	  modTim={time},
	  nDblInp=nDblInp,
	  dblInpNam=dblInpNam,
	  dblInpVal=dblInpVal,
	  nDblOut=nDblOut,
	  dblOutNam=dblOutNam,
	  nDblPar=nDblPar,
	  dblParNam=dblParNam,
	  dblParVal=dblParVal,
	  resWri=resWri); 
	   
  if havePytPat then
    Modelica.Utilities.System.setEnvironmentVariable(name="PYTHONPATH", content=
      pytPat);
  else
    Modelica.Utilities.System.setEnvironmentVariable(name="PYTHONPATH", content="");
  end if;  
end Simulator;