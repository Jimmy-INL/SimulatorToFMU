.. highlight:: rest

.. _build:


Creating an FMU
===============

This chapter describes how to create a Functional Mockup Unit, starting from a Simulator XML input file.
It assumes you have followed the :doc:`installation` instructions, and that you have created the Simulator 
model description file  following the :doc:`bestPractice` guidelines.

Command-line use
^^^^^^^^^^^^^^^^

To create an FMU,
open a command-line window (see :doc:`notation`).
The standard invocation of the SimulatorToFMU tool is:

.. code-block:: none

  > python3  <scriptDir>SimulatorToFMU.py <python-scripts-path> 

where ``scriptDir`` is the path to the scripts directory of SimulatorToFMU.
This is the ``parser`` subdirectory of the installation directory.
See :doc:`installation` for details.

An example of invoking ``SimulatorToFMU.py`` on Windows is 

.. code-block:: none

  # Windows:
  > python3 parser\SimulatorToFMU.py -s Simulator.py, calcEng.py


.. note:: 

    - All file paths can be absolute or relative.
    - If any file path contains spaces, then it must be surrounded with double quotes. 
    - On windows Operating system, all paths must use double backward slash (e.g. C:\\\\Simulator.py).

Script ``SimulatorToFMU.py`` supports the following command-line switches:

+----------------------------------------------------+-------------------------------------------------------------------+
| Options                                            | Purpose                                                           | 
+====================================================+===================================================================+
| -s                                                 | Paths to python scripts required to run the                       |   
|                                                    | Simulator. The main Python script must be an extension            |
|                                                    | of the Simulator.py script provided in                            |
|                                                    | ``parser\utilities\Simulator.py``.                                |
|                                                    | Its name must be Simulator.py.                                    |
+----------------------------------------------------+-------------------------------------------------------------------+
| -c                                                 | Path to the Simulator model file.                                 |   
+----------------------------------------------------+-------------------------------------------------------------------+
| -i                                                 | Path to the XML input file with the inputs/outputs of the FMU.    |  
|                                                    | Default is ``parser\utilities\SimulatorModelDescription.xml``     |
+----------------------------------------------------+-------------------------------------------------------------------+
| -v                                                 | FMI version. Options are ``1.0`` and ``2.0``. Default is ``2.0``  |   
+----------------------------------------------------+-------------------------------------------------------------------+
| -a                                                 | FMI API version. Options are ``cs`` (co-simulation) and ``me``    | 
|                                                    | (model exchange). Default is ``me``.                              |  
+----------------------------------------------------+-------------------------------------------------------------------+
| -t                                                 | Export tool. Options are ``omc`` (OpenModelica) and ``dymola``    | 
|                                                    | (Dymola). Default is ``dymola``.                                  |  
+----------------------------------------------------+-------------------------------------------------------------------+

The main functions of SimulatorToFMU are

 - reading, validating, and parsing the Simulator XML input file. 
   This includes removing and replacing invalid characters in variable names such as ``*+-`` with ``_``,
 - writing Modelica code with valid inputs and outputs names,
 - invoking Dymola to compile the :term:`Modelica` code as an FMU for model exchange or co-simulation 2.0.

.. note:: 

  For FMI 2.0 FMUs, SimulatorToFMU will rewrite the model description file 
  generated by Dymola or OpenModelica to include ``needsExecutionTool=true`` 
  attribute in the FMU capabilities of the Simulator FMU. 
  This is currently not supported by Dymola and OpenModelica. 

Output
^^^^^^

The main output from running ``SimulatorToFMU.py`` consists of an FMU, named after the ``modelName`` specified in the input file.
The FMU is written to the current working directory, that is, in the directory from which you entered the command.

The FMU is complete and self-contained.

Any secondary output from running the SimulatorToFMU tools can be deleted safely.

Note that the FMU is a zip file.
This means you can open and inspect its contents.
To do so, it may help to change the "``.fmu``" extension to "``.zip``".

.. note:: 

   SimulatorToFMU.py detects the Python version used to export the FMU and 
   include binaries for Python 2.7 or Python 3.5. Hence it is important 
   to use the correct version of Python when invoking SimulatorToFMU.py.

Exporting a Simulator with Python 2.7
"""""""""""""""""""""""""""""""""""""

If SimulatorToFMU is run using Python 2.7, then 
SimulatorToFMU.py creates a  ``.zip`` file named
``Simulator.scripts.zip`` along with the FMU. 
The zip file contains the Python scripts needed to 
interface the Simulator. The unzipped folder must be added 
to the PYTHONPATH of the target machine where the FMU will be used.
This is because of an issue with Cython and the python interpreter 
which does not add the files on the path as expected. 
This step is not needed when using Python 3.5.x.

